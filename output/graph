// AST
digraph {
	node1 [label="program: expression=funfactorial(n)<missing ';'>{if(n<=0)return1;returnn*factorial(n-1);}<EOF>"]
	node2 [label="declaration: expression=funfactorial(n)<missing ';'>"]
	node3 [label="statement: expression=funfactorial(n)<missing ';'>"]
	node4 [label="exprStmt: expression=funfactorial(n)<missing ';'>"]
	node5 [label="expression: expression=funfactorial(n)"]
	node6 [label="assignment: expression=funfactorial(n)"]
	node7 [label="Terminal: expression"]
	node6 -> node7
	node8 [label="Terminal: ="]
	node6 -> node8
	node9 [label="assignment: funfactorial(n)"]
	node10 [label="Terminal: fun"]
	node9 -> node10
	node11 [label="logic_or: factorial(n)"]
	node12 [label="logic_and: factorial(n)"]
	node13 [label="equality: factorial(n)"]
	node14 [label="comparison: factorial(n)"]
	node15 [label="term: factorial(n)"]
	node16 [label="factor: factorial(n)"]
	node17 [label="unary: factorial(n)"]
	node18 [label="call: factorial(n)"]
	node19 [label="primary: factorial"]
	node20 [label="Terminal: factorial"]
	node19 -> node20
	node18 -> node19
	node21 [label="Terminal: ("]
	node18 -> node21
	node22 [label="arguments: n"]
	node23 [label="expression: n"]
	node24 [label="assignment: n"]
	node25 [label="logic_or: n"]
	node26 [label="logic_and: n"]
	node27 [label="equality: n"]
	node28 [label="comparison: n"]
	node29 [label="term: n"]
	node30 [label="factor: n"]
	node31 [label="unary: n"]
	node32 [label="call: n"]
	node33 [label="primary: n"]
	node34 [label="Terminal: n"]
	node33 -> node34
	node32 -> node33
	node31 -> node32
	node30 -> node31
	node29 -> node30
	node28 -> node29
	node27 -> node28
	node26 -> node27
	node25 -> node26
	node24 -> node25
	node23 -> node24
	node22 -> node23
	node18 -> node22
	node35 [label="Terminal: )"]
	node18 -> node35
	node17 -> node18
	node16 -> node17
	node15 -> node16
	node14 -> node15
	node13 -> node14
	node12 -> node13
	node11 -> node12
	node9 -> node11
	node6 -> node9
	node5 -> node6
	node4 -> node5
	node36 [label="Terminal: <missing ';'>"]
	node4 -> node36
	node3 -> node4
	node2 -> node3
	node1 -> node2
	node37 [label="declaration: {if(n<=0)return1;returnn*factorial(n-1);}"]
	node38 [label="statement: {if(n<=0)return1;returnn*factorial(n-1);}"]
	node39 [label="block: {if(n<=0)return1;returnn*factorial(n-1);}"]
	node40 [label="Terminal: {"]
	node39 -> node40
	node41 [label="declaration: if(n<=0)return1;"]
	node42 [label="statement: if(n<=0)return1;"]
	node43 [label="ifStmt: if(n<=0)return1;"]
	node44 [label="Terminal: if"]
	node43 -> node44
	node45 [label="Terminal: ("]
	node43 -> node45
	node46 [label="expression: n<=0"]
	node47 [label="assignment: n<=0"]
	node48 [label="logic_or: n<=0"]
	node49 [label="logic_and: n<=0"]
	node50 [label="equality: n<=0"]
	node51 [label="comparison: n<=0"]
	node52 [label="term: n"]
	node53 [label="factor: n"]
	node54 [label="unary: n"]
	node55 [label="call: n"]
	node56 [label="primary: n"]
	node57 [label="Terminal: n"]
	node56 -> node57
	node55 -> node56
	node54 -> node55
	node53 -> node54
	node52 -> node53
	node51 -> node52
	node58 [label="Terminal: <="]
	node51 -> node58
	node59 [label="term: 0"]
	node60 [label="factor: 0"]
	node61 [label="unary: 0"]
	node62 [label="call: 0"]
	node63 [label="primary: 0"]
	node64 [label="Terminal: 0"]
	node63 -> node64
	node62 -> node63
	node61 -> node62
	node60 -> node61
	node59 -> node60
	node51 -> node59
	node50 -> node51
	node49 -> node50
	node48 -> node49
	node47 -> node48
	node46 -> node47
	node43 -> node46
	node65 [label="Terminal: )"]
	node43 -> node65
	node66 [label="statement: return1;"]
	node67 [label="returnStmt: return1;"]
	node68 [label="Terminal: return"]
	node67 -> node68
	node69 [label="expression: 1"]
	node70 [label="assignment: 1"]
	node71 [label="logic_or: 1"]
	node72 [label="logic_and: 1"]
	node73 [label="equality: 1"]
	node74 [label="comparison: 1"]
	node75 [label="term: 1"]
	node76 [label="factor: 1"]
	node77 [label="unary: 1"]
	node78 [label="call: 1"]
	node79 [label="primary: 1"]
	node80 [label="Terminal: 1"]
	node79 -> node80
	node78 -> node79
	node77 -> node78
	node76 -> node77
	node75 -> node76
	node74 -> node75
	node73 -> node74
	node72 -> node73
	node71 -> node72
	node70 -> node71
	node69 -> node70
	node67 -> node69
	node81 [label="Terminal: ;"]
	node67 -> node81
	node66 -> node67
	node43 -> node66
	node42 -> node43
	node41 -> node42
	node39 -> node41
	node82 [label="declaration: returnn*factorial(n-1);"]
	node83 [label="statement: returnn*factorial(n-1);"]
	node84 [label="returnStmt: returnn*factorial(n-1);"]
	node85 [label="Terminal: return"]
	node84 -> node85
	node86 [label="expression: n*factorial(n-1)"]
	node87 [label="assignment: n*factorial(n-1)"]
	node88 [label="logic_or: n*factorial(n-1)"]
	node89 [label="logic_and: n*factorial(n-1)"]
	node90 [label="equality: n*factorial(n-1)"]
	node91 [label="comparison: n*factorial(n-1)"]
	node92 [label="term: n*factorial(n-1)"]
	node93 [label="factor: n*factorial(n-1)"]
	node94 [label="unary: n"]
	node95 [label="call: n"]
	node96 [label="primary: n"]
	node97 [label="Terminal: n"]
	node96 -> node97
	node95 -> node96
	node94 -> node95
	node93 -> node94
	node98 [label="Terminal: *"]
	node93 -> node98
	node99 [label="unary: factorial(n-1)"]
	node100 [label="call: factorial(n-1)"]
	node101 [label="primary: factorial"]
	node102 [label="Terminal: factorial"]
	node101 -> node102
	node100 -> node101
	node103 [label="Terminal: ("]
	node100 -> node103
	node104 [label="arguments: n-1"]
	node105 [label="expression: n-1"]
	node106 [label="assignment: n-1"]
	node107 [label="logic_or: n-1"]
	node108 [label="logic_and: n-1"]
	node109 [label="equality: n-1"]
	node110 [label="comparison: n-1"]
	node111 [label="term: n-1"]
	node112 [label="factor: n"]
	node113 [label="unary: n"]
	node114 [label="call: n"]
	node115 [label="primary: n"]
	node116 [label="Terminal: n"]
	node115 -> node116
	node114 -> node115
	node113 -> node114
	node112 -> node113
	node111 -> node112
	node117 [label="Terminal: -"]
	node111 -> node117
	node118 [label="factor: 1"]
	node119 [label="unary: 1"]
	node120 [label="call: 1"]
	node121 [label="primary: 1"]
	node122 [label="Terminal: 1"]
	node121 -> node122
	node120 -> node121
	node119 -> node120
	node118 -> node119
	node111 -> node118
	node110 -> node111
	node109 -> node110
	node108 -> node109
	node107 -> node108
	node106 -> node107
	node105 -> node106
	node104 -> node105
	node100 -> node104
	node123 [label="Terminal: )"]
	node100 -> node123
	node99 -> node100
	node93 -> node99
	node92 -> node93
	node91 -> node92
	node90 -> node91
	node89 -> node90
	node88 -> node89
	node87 -> node88
	node86 -> node87
	node84 -> node86
	node124 [label="Terminal: ;"]
	node84 -> node124
	node83 -> node84
	node82 -> node83
	node39 -> node82
	node125 [label="Terminal: }"]
	node39 -> node125
	node38 -> node39
	node37 -> node38
	node1 -> node37
	node126 [label="Terminal: <EOF>"]
	node1 -> node126
}
